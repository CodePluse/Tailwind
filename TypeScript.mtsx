{
    name: ["TypeScript", ".ts", ".tsx"]
    comment: {startsWith: "//"}
    comment: {startsWith: "/*", endsWith: "*/"}
    styles: [
        "decorator", #C678DD, #C586C0
        "interface", #61AFEF, #4EC9B0
        "enum", #E06C75, #4EC9B0
        "function", #61AFEF, #C586C0
        "variable", #E06C75, #C586C0
        "attribute", #D19A66, #C586C0
        "keyword", #C678DD, #C586C0
        "string", #98C379, #C586C0
        "number", #D19A66, #C586C0
        "operator", #56B6C2, #C586C0
        "type", #E5C07B, #C586C0
        "namespace", #E5C07B, #C586C0
        "enum", #E06C75, #C586C0
        "tag", #E06C75, #C586C0
        "attrName", #D19A66, #C586C0
        "attrValue", #98C379, #C586C0
    ]
    contains: [
        // Strings
        {builtin: #JAVA_QUOTED_STRING#}
        // Template strings
        {
            style: "string"
            start: {match: /`/}
            end: {match: /`/}
            contains: [
                {match: /\$\{[^}]*\}/, 0: "variable"}
                {match: /\\./}
            ]
        }
        // Numbers
        {number: "2|8|10|16|F|E|P|_"}
        // Decorators
        {match: /@[a-zA-Z_$][\w$]*/, 0: "decorator"}
        // Keywords
        {match: keywordsToRegex(
            "abstract as async await break case catch class const continue debugger default delete do else enum export extends false finally for from function get if implements import in instanceof interface let new null of package private protected public return set static super switch this throw true try typeof var void while with yield"
        ), 0: "keyword"}
        // Types and interfaces
        {match: /\b(type|interface)\s+([a-zA-Z_$][\w$]*)/, 1: "keyword", 2: "type"}
        // Classes
        {match: /\b(class)\s+([a-zA-Z_$][\w$]*)/, 1: "keyword", 2: "type"}
        // Namespaces
        {match: /\b(namespace)\s+([a-zA-Z_$][\w$]*)/, 1: "keyword", 2: "namespace"}
        // Enumerations
        {match: /\b(enum)\s+([a-zA-Z_$][\w$]*)/, 1: "keyword", 2: "enum"}
        // Operators
        {match: /(?:<|>|=|\+|-|\*|\/|%|&|\||\^|~|!|\?|:|\.|,|;)/, 0: "operator"}
        // Highlighting for method calls
        {match: /\b([a-zA-Z_$][\w$]*)(?=\s*\()/, 1: "function"}
        // Functions
        {match: /\b([a-zA-Z_$][\w$]*)\s*(?=\()/, 1: "funName"}
        // Built-in types
        {match: keywordsToRegex(
            "any boolean never number string void symbol object undefined null bigint"
        ), 0: "type"}
        // Built-in objects
        {match: keywordsToRegex(
            "Array Date Error Map Math Object Promise RegExp Set String Symbol"
        ), 0: "type"}
        // Variables
        {match: /\b(let|const|var)\s+([a-zA-Z_$][\w$]*)/, 1: "keyword", 2: "variable"}
        // Attributes
        {match: /\b([a-zA-Z_$][\w$]*)(?=\s*=\s*["'{])/, 1: "attribute"}
        // HTML Tags
        {match: /<\/?([a-zA-Z_$][\w$]*)/, 1: "tag"}
        // HTML Attributes
        {match: /\b([a-zA-Z_$][\w$]*)(?=\s*=\s*["'{])/, 1: "attrName"}
        // HTML Attribute Values
        {match: /(["'])(?:(?=(\\?))\2.)*?\1/, 0: "attrValue"}
    ]
    codeFormatter: #BUILT_IN_JS_FORMATTER#
}